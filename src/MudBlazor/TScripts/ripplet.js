//https://github.com/luncheon/ripplet.js | Licensed under WTFPL
!function (e, t) { "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).ripplet = t() }(this, function () { "use strict"; function w(e, t, n) { for (var o = 0, i = n; o < i.length; o++) { var r = i[o]; e[r] = t[r] } } var B = { className: "", color: "currentcolor", opacity: .1, spreadingDuration: ".4s", spreadingDelay: "0s", spreadingTimingFunction: "linear", clearing: !0, clearingDuration: "1s", clearingDelay: "0s", clearingTimingFunction: "ease-in-out", centered: !1, appendTo: "body" }, L = new Map; function t(e, n) { var t = e.currentTarget, o = e.clientX, i = e.clientY; if (t instanceof Element) { var r = n ? Object.keys(B).reduce(function (e, t) { return e[t] = n.hasOwnProperty(t) ? n[t] : B[t], e }, {}) : B, l = t.getBoundingClientRect(); if (r.centered && "false" !== r.centered) o = l.left + .5 * l.width, i = l.top + .5 * l.height; else if ("number" != typeof o || "number" != typeof i) return; var a, p, s, d, c = getComputedStyle(t), f = document.documentElement, u = document.body, g = document.createElement("div"), m = "parent" === r.appendTo, h = "target" === r.appendTo, y = g, b = g.style; "fixed" === c.position || "absolute" === c.position && (m || h) ? (m ? t.parentElement.insertBefore(g, t) : h ? t.appendChild(g) : u.appendChild(g), w(b, c, ["position", "left", "top", "right", "bottom", "marginLeft", "marginTop", "marginRight", "marginBottom"])) : m ? "flex" === (a = getComputedStyle(t.parentElement)).display || "inline-flex" === a.display ? (t.parentElement.insertBefore(g, t), b.position = "absolute", b.left = t.offsetLeft + "px", b.top = t.offsetTop + "px") : ((s = (p = y = t.parentElement.insertBefore(document.createElement("div"), t)).style).display = "inline-block", s.position = "relative", s.width = s.height = "0", s.cssFloat = c.cssFloat, d = p.getBoundingClientRect(), p.appendChild(g), b.position = "absolute", b.top = l.top - d.top + "px", b.left = l.left - d.left + "px") : h ? "flex" === (a = getComputedStyle(t)).display || "inline-flex" === a.display ? (t.appendChild(g), b.position = "absolute", b.left = t.offsetLeft + "px", b.top = t.offsetTop + "px") : ((s = (p = y = t.appendChild(document.createElement("div"))).style).display = "inline-block", s.position = "relative", s.width = s.height = "0", s.cssFloat = c.cssFloat, d = p.getBoundingClientRect(), p.appendChild(g), b.position = "absolute", b.top = l.top - d.top + "px", b.left = l.left - d.left + "px") : (u.appendChild(g), b.position = "absolute", b.left = l.left + f.scrollLeft + u.scrollLeft + "px", b.top = l.top + f.scrollTop + u.scrollTop + "px"), b.overflow = "hidden", b.pointerEvents = "none", b.width = l.width + "px", b.height = l.height + "px", b.zIndex = (+c.zIndex || 0) + 1, b.opacity = r.opacity, w(b, c, ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomLeftRadius", "borderBottomRightRadius", "webkitClipPath", "clipPath"]); var x, v = Math.max(o - l.left, l.right - o), E = Math.max(i - l.top, l.bottom - i), T = Math.sqrt(v * v + E * E), C = g.appendChild(document.createElement("div")), R = C.style; return C.className = r.className, R.backgroundColor = /^currentcolor$/i.test(r.color) ? c.color : r.color, R.width = R.height = 2 * T + "px", "rtl" === getComputedStyle(m || h ? t.parentElement : u).direction ? R.marginRight = l.right - o - T + "px" : R.marginLeft = o - l.left - T + "px", R.marginTop = i - l.top - T + "px", R.borderRadius = "50%", R.transition = "transform " + r.spreadingDuration + " " + r.spreadingTimingFunction + " " + r.spreadingDelay + ",opacity " + r.clearingDuration + " " + r.clearingTimingFunction + " " + r.clearingDelay, R.transform = "scale(0)", C.offsetTop, R.transform = "", C.addEventListener("transitionend", function (e) { "opacity" === e.propertyName && y.parentElement && y.parentElement.removeChild(y) }), r.clearing && "false" !== r.clearing ? R.opacity = "0" : ((x = L.get(t)) || L.set(t, x = new Map), x.set(g, C)), g } } t.clear = function (e, t) { var n, o; e ? (n = L.get(e)) && (t ? ((o = n.get(t)) && (o.style.opacity = "0"), n.delete(t), 0 === n.size && L.delete(e)) : (n.forEach(function (e) { return e.style.opacity = "0" }), L.delete(e))) : (L.forEach(function (e) { return e.forEach(function (e) { return e.style.opacity = "0" }) }), L.clear()) }, t.defaultOptions = B, t._ripplets = L; var n = Object.freeze({ __proto__: null, defaultOptions: B, default: t }); return Object.keys(n).forEach(function (e) { t[e] = n[e] }), t });